// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Wrapper.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

import "./interfaces/IUserProxy.sol";
import "./interfaces/IUserProxyFactory.sol";



/**
 * @title UserProxyInterface
 * @author 0xDAO
 * @notice The primary user interface contract for front-end
 * @dev User proxy interface is responsible for creating and fetching a user's proxy
 *      and transferring tokens/routing calls to the user's proxy
 * @dev All calls here are unpermissioned as each call deals only with the proxy for msg.sender
 * @dev Authentication is handled in actual UserProxy implementations
 */
contract UserProxyInterface {
    // Public addresses
    address public userProxyFactoryAddress;
    address public oxLensAddress;

    /**
     * @notice Initialize UserProxyInterface
     * @param _userProxyFactoryAddress Factory address
     * @param _oxLensAddress oxLens address
     */
    function initialize(
        address _userProxyFactoryAddress,
        address _oxLensAddress
    ) public {
        require(userProxyFactoryAddress == address(0), "Already initialized");
        userProxyFactoryAddress = _userProxyFactoryAddress;
        oxLensAddress = _oxLensAddress;

        // ...
    }
    /*******************************************************
     *                    LP Interactions
     *******************************************************/

    /**
     * @notice LP -> oxPool LP
     * @param solidPoolAddress The solid pool LP address to deposit
     * @param amount The amount of solid pool LP to deposit and stake
     */
    function depositLp(address solidPoolAddress, uint256 amount) public {
        // Fetch user proxy
        IUserProxy userProxy = createAndGetUserProxy();
        address userProxyOwnerAddress = userProxy.ownerAddress();

        // Receive LP from UserProxy owner
        IERC20(solidPoolAddress).transferFrom(
            userProxyOwnerAddress,
            address(this),
            amount
        );

        // Allow UserProxy to spend LP
        IERC20(solidPoolAddress).approve(address(userProxy), amount);

        // Deposit LP into oxPool via UserProxy
        userProxy.depositLp(solidPoolAddress, amount);
    }


    // Only allow users to interact with their proxy
    function createAndGetUserProxy() internal returns (IUserProxy) {
        return
            IUserProxy(
                IUserProxyFactory(userProxyFactoryAddress)
                    .createAndGetUserProxy(msg.sender)
            );
    }

}
